3.108.63.229	MASTER ===== WORKSTATION
65.0.99.120	WORKER1
65.0.45.53	WORKER2
===========================
K8s
================
Master Node
--------------
API Server 	-> POD -> Container -> Image -> Google Registry
Etcd		-> POD -> Container -> Image -> Google Registry
Controller Mgr	-> POD -> Container -> Image -> Google Registry
Schedular	-> POD -> Container -> Image -> Google Registry
kube proxy 	-> POD -> Container -> Image -> Google Registry
kubectl
kubelet
docker
Kubeadm init

Worker Node
------------
kubelet 
docker
kubectl
Kubeadm join
kube proxy -> POD -> Container -> Image -> Google Registry


HARDWAY - 
https://github.com/kelseyhightower/kubernetes-the-hard-way

Kubeadm -
https://github.com/kubernetes/kubeadm

How to setup k8 clustor
https://www.devopsschool.com/blog/setting-up-kubernetes-clusters-using-kubeadm-manual-way-in-rhel-7-centos7/

Which tools?
https://devopsschool.com/path/



To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.1.245:6443 --token 7ka2qg.8ilpsjws5q6r34bc \
        --discovery-token-ca-cert-hash sha256:98ba41e244a78c26b120da43731954b5ba796d30c99cf17566fc3a7252e3ac1d
====================

How Workstation works?
	kubectl connect to API server?
------------------------------------------------

HUMAN --> Kubectl 				----> API SERVER
		 read a "config" file.
		 From 
			COMMAND PROMPT	= --kubeconfig=Path to the kubeconfig file
			ENV VAR		= export KUBECONFIG=/etc/kubernetes/admin.conf
			$HOME/.kube	= $HOME/.kube/config

What is the content of config?
=====================================
		YAML file

Clustor(S)
	Clustor1: ip/port of api
	Clustor2: ip/port of api
	Clustor3: ip/port of api
USER(S)
	USER1: cert+key
	USER2: cert+key
	USER3: cert+key
Context(S)
	Context1=Clustor1+USER2
	Context2=Clustor2+USER1
	Context3=Clustor3+USER3

curr-context=Context1 OR Context2 OR Context3

How to set a context?
- in config file using curr-context
- over command line using --context


Roles & Repo
============================
APP DEV -> Docker Image
		TESTING by QA/Dev with a Help of Docker Compose

	Write k8 deployment file  - QA	 by QA
	Write k8 deployment file  - Pre	 by QA
	Write k8 deployment file  - Prod by OPs
K8s Dev
		DEV
		QA
		OPS
K8s ADMin
		QA
		OPS
================================================
List of Popular Tools and Applications in Kubernetes ecosystem
https://www.devopsschool.com/blog/understanding-the-tools-sets-in-kubernetes-ecosystem/

- Number of users
- Your expectations of App Response

=======================================================================
What do you want?
=======================================================================
Namespace		Account		
POD			Virtual Machine			
ReplicationController	Auto Scalling
Deployment		Auto Scalling + Rollout + Rollback
Services		Load Balancer
PV			Storage
PVC			Storage Claim


[centos@ip-172-31-1-245 ~]$ kubectl api-resources
NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND
bindings                                       v1                                     true         Binding
componentstatuses                 cs           v1                                     false        ComponentStatus
configmaps                        cm           v1                                     true         ConfigMap
endpoints                         ep           v1                                     true         Endpoints
events                            ev           v1                                     true         Event
limitranges                       limits       v1                                     true         LimitRange
namespaces                        ns           v1                                     false        Namespace
nodes                             no           v1                                     false        Node
persistentvolumeclaims            pvc          v1                                     true         PersistentVolumeClaim
persistentvolumes                 pv           v1                                     false        PersistentVolume
pods                              po           v1                                     true         Pod
podtemplates                                   v1                                     true         PodTemplate
replicationcontrollers            rc           v1                                     true         ReplicationController
resourcequotas                    quota        v1                                     true         ResourceQuota
secrets                                        v1                                     true         Secret
serviceaccounts                   sa           v1                                     true         ServiceAccount
services                          svc          v1                                     true         Service
mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        false        MutatingWebhookConfiguration
validatingwebhookconfigurations                admissionregistration.k8s.io/v1        false        ValidatingWebhookConfiguration
customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                false        CustomResourceDefinition
apiservices                                    apiregistration.k8s.io/v1              false        APIService
controllerrevisions                            apps/v1                                true         ControllerRevision
daemonsets                        ds           apps/v1                                true         DaemonSet
deployments                       deploy       apps/v1                                true         Deployment
replicasets                       rs           apps/v1                                true         ReplicaSet
statefulsets                      sts          apps/v1                                true         StatefulSet
tokenreviews                                   authentication.k8s.io/v1               false        TokenReview
localsubjectaccessreviews                      authorization.k8s.io/v1                true         LocalSubjectAccessReview
selfsubjectaccessreviews                       authorization.k8s.io/v1                false        SelfSubjectAccessReview
selfsubjectrulesreviews                        authorization.k8s.io/v1                false        SelfSubjectRulesReview
subjectaccessreviews                           authorization.k8s.io/v1                false        SubjectAccessReview
horizontalpodautoscalers          hpa          autoscaling/v1                         true         HorizontalPodAutoscaler
cronjobs                          cj           batch/v1                               true         CronJob
jobs                                           batch/v1                               true         Job
certificatesigningrequests        csr          certificates.k8s.io/v1                 false        CertificateSigningRequest
leases                                         coordination.k8s.io/v1                 true         Lease
endpointslices                                 discovery.k8s.io/v1                    true         EndpointSlice
events                            ev           events.k8s.io/v1                       true         Event
ingresses                         ing          extensions/v1beta1                     true         Ingress
flowschemas                                    flowcontrol.apiserver.k8s.io/v1beta1   false        FlowSchema
prioritylevelconfigurations                    flowcontrol.apiserver.k8s.io/v1beta1   false        PriorityLevelConfiguration
ingressclasses                                 networking.k8s.io/v1                   false        IngressClass
ingresses                         ing          networking.k8s.io/v1                   true         Ingress
networkpolicies                   netpol       networking.k8s.io/v1                   true         NetworkPolicy
runtimeclasses                                 node.k8s.io/v1                         false        RuntimeClass
poddisruptionbudgets              pdb          policy/v1                              true         PodDisruptionBudget
podsecuritypolicies               psp          policy/v1beta1                         false        PodSecurityPolicy
clusterrolebindings                            rbac.authorization.k8s.io/v1           false        ClusterRoleBinding
clusterroles                                   rbac.authorization.k8s.io/v1           false        ClusterRole
rolebindings                                   rbac.authorization.k8s.io/v1           true         RoleBinding
roles                                          rbac.authorization.k8s.io/v1           true         Role
priorityclasses                   pc           scheduling.k8s.io/v1                   false        PriorityClass
csidrivers                                     storage.k8s.io/v1                      false        CSIDriver
csinodes                                       storage.k8s.io/v1                      false        CSINode
csistoragecapacities                           storage.k8s.io/v1beta1                 true         CSIStorageCapacity
storageclasses                    sc           storage.k8s.io/v1                      false        StorageClass
volumeattachments                              storage.k8s.io/v1                      false        VolumeAttachment

====================================================================================
 35  kubectl get ns
   36  kubectl get pods --all-namespaces
   37  clear
   38  kubectl
   39  kubectl api-resources
   40  kubectl
   41  kubectl api-versions
   42  clear
   43  kubectl
   44  clear
   45  kubectl cluster-info
   46  kubectl config view
   47  clear
   48  kubectl
   49  kubectl options
   50  clear
   51  history
   52  kubectl get nodes
   53  history

====================================================
15 mins


Workstation - 3.108.63.229
User - centos
Password - centos123

================================================================



CRUD
================================
	Create
		CMD
			create
		YAML		
			create -f

	READ
		CMD
			get 
		YAML	
			NA


	UPDATE
		CMD
			edit
		YAML
			apply -f

	DELETE		
		CMD
			delete
		YAML
			delete -f




  1  kubectl
    2  clear
    3  kubectl create ns dev
    4  kubectl get ns
    5  kubectl create ns qa
    6  kubectl get ns
    7  kubectl describe ns dev
    8  kubectl edit ns dev
    9  kubectl describe ns dev
   10  kubectl delete ns dev
   11  history
==================================================

CRUD
================================
	Create
		CMD
			create
		YAML		
			create -f

	READ
		CMD
			get 
		YAML	
			NA


	UPDATE
		CMD
			edit
		YAML
			apply -f

	DELETE		
		CMD
			delete
		YAML
			delete -f


apiVersion: v1
kind: Namespace
metadata:
  name: <insert-namespace-name-here>

---

apiVersion: v1
kind: Pod
metadata:
  name: hello-pod

spec:
  containers:
  - name: hello-ctr
    image: nginx
    ports:
    - containerPort: 80


 12  kubectl create -h
   13  clear
   14  l
   15  ls
   16  clear
   17  ls
   18  vi pod.yaml
   19  clear
   20  kubectl get ns
   21  clear
   22  kubectl get pods --all-namesapces
   23  kubectl get pods --all-namespaces
   24  clear
   25  kubectl get pods --all-namespaces
   26  clear
   27  ls
   28  kubectl create -f pod.yaml
   29  vi pod.yaml
   30  kubectl create -f pod.yaml
   31  kubectl get pods
   32  kubectl get pods -n=dev
   33  kubectl create ns rajesh
   34  clear
   35  kubectl get pods -n=rajesh
   36  kubectl get pods
   37  vi pod.yaml
   38  kubectl create -f pod.yaml
   39  vi pod.yaml
   40  kubectl create -f pod.yaml
   41  kubectl apply -f pod.yaml
   42  clear
   43  kubectl get pods
   44  kubectl create -f pod.yaml
   45  kubectl create -f pod.yaml -n=rajesh
   46  kubectl get pods
   47* kubectl get pods
   48  kubectl get pods -n=rajesh,default
   49  kubectl get pods -n=rajesh default
   50  kubectl get pods --all-namespaces
   51  clear
   52  ls
   53  kubectl get pods
   54  kubectl edit pod hello-pod -n=rajesh
   55  kubectl desribe pod hello-pod -n=rajesh
   56  kubectl describe pod hello-pod -n=rajesh
   57  clear
   58  ls
   59  kubectl get pods -n=rajesh
   60  kubectl get pods -n=rajesh -o wide
   61  kubectl
   62  kubectl get
   63  kubectl get -h
   64  clear
   65  kubectl get -h
   66  clear
   67  kubectl get pods
   68  kubectl delete pod hello-pod
   69  kubectl delete -f pod.yaml -n=rajesh
   70  history
============================
apiVersion: v1
kind: Pod
metadata:
  name: hello-pod-ravi

spec:
  containers:
  - name: hello-ctr-ravi
    image: nginx
    ports:
    - containerPort: 80
  - name: hello-ctr-ravi-2
    image: jenkins/jenkins
    ports:
    - containerPort: 8080



=====================================

PS			Conainer

APP			Dockerimage
APP CONFIG file		docker app file




apiVersion: v1
kind: Pod
metadata:
  name: hello-pod-ravi-1

spec:
  containers:
  - name: hello-ctr-ravi
    image: nginx
    ports:
    - containerPort: 80
  - name: hello-ctr-ravi-2
    image: jenkins/jenkins
    ports:
    - containerPort: 8080
==================================================================================================

How to use POD?
===========================================
Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  proxy         Run a proxy to the Kubernetes API server
  cp            Copy files and directories to and from containers.
  auth          Inspect authorization
  debug         Create debugging sessions for troubleshooting workloads and nodes





 158  kubectl get pods -n=rajesh
  159  kubectl describe pod hello-pod-jenkins -n=rajesh
  160  clear
  161  ls
  162  kubectl describe pod hello-pod-jenkins -n=rajesh
  163  clear
  164  kubectl get pods -n=rajesh
  165  kubectl
  166  clear
  167  kubectl get pods -n=rajesh -o wide
  168  kubectl logs hello-pod -n=rajesh
  169  watch kubectl logs hello-pod -n=rajesh
  170  clear
  171  kubectl get pods
  172  kubectl describe pod hello-pod-jenkins
  173  kubectl describe pod hello-pod-jenkins -n=rajesh
  174  clear
  175  kubectl get pods
  176  kubectl get pods -n=rajesh
  177  kubectl logs hello-pod-jenkins -n=rajesh -c=hello-ctr1
  178  clear

 179  history
  180  clear
  181  kubectl get pods -n=rajesh
  182  kubectl attach hello-pod -n=rajesh
  183  clear
  184  kubectl attach hello-pod -n=rajesh -c=contid
  185  clear
  186  kubectl get pods -n=rajesh
  187  kubectl exec hello-pod -n=rajesh ls
  188  clear
  189  kubectl exec -it hello-pod -n=rajesh /bin/bash
  190  history






  # Return snapshot logs from pod nginx with only one container
  kubectl logs nginx

  # Return snapshot logs from pod nginx with multi containers
  kubectl logs nginx --all-containers=true

  # Return snapshot logs from all containers in pods defined by label app=nginx
  kubectl logs -lapp=nginx --all-containers=true

  # Return snapshot of previous terminated ruby container logs from pod web-1
  kubectl logs -p -c ruby web-1

  # Begin streaming the logs of the ruby container in pod web-1
  kubectl logs -f -c ruby web-1

  # Begin streaming the logs from all containers in pods defined by label app=nginx
  kubectl logs -f -lapp=nginx --all-containers=true

  # Display only the most recent 20 lines of output in pod nginx
  kubectl logs --tail=20 nginx

  # Show all logs from pod nginx written in the last hour
  kubectl logs --since=1h nginx

  # Show logs from a kubelet with an expired serving certificate
  kubectl logs --insecure-skip-tls-verify-backend nginx

  # Return snapshot logs from first container of a job named hello
  kubectl logs job/hello

  # Return snapshot logs from container nginx-1 of a deployment named nginx
  kubectl logs deployment/nginx -c nginx-1


  # Get output from running pod mypod, use the kubectl.kubernetes.io/default-container annotation
  # for selecting the container to be attached or the first container in the pod will be chosen
  kubectl attach mypod

  # Get output from ruby-container from pod mypod
  kubectl attach mypod -c ruby-container

  # Switch to raw terminal mode, sends stdin to 'bash' in ruby-container from pod mypod
  # and sends stdout/stderr from 'bash' back to the client
  kubectl attach mypod -c ruby-container -i -t

  # Get output from the first pod of a ReplicaSet named nginx
  kubectl attach rs/nginx


  # Get output from running 'date' command from pod mypod, using the first container by default
  kubectl exec mypod -- date

  # Get output from running 'date' command in ruby-container from pod mypod
  kubectl exec mypod -c ruby-container -- date

  # Switch to raw terminal mode, sends stdin to 'bash' in ruby-container from pod mypod
  # and sends stdout/stderr from 'bash' back to the client
  kubectl exec mypod -c ruby-container -i -t -- bash -il















































































